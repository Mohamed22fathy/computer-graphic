#include<windows.h>
#include<GL/glut.h>
void draw();
float width;
float height;
void timer(int);
void reshape(int, int);
void background();
int main(int argc, char** argv) {

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);

	width = GetSystemMetrics(SM_CXSCREEN);
	height = GetSystemMetrics(SM_CYSCREEN);

	glutInitWindowSize(width, height);


	glutCreateWindow("moving triangles");

	glutDisplayFunc(draw);
	glutReshapeFunc(reshape);
	background();
	glutTimerFunc(0, timer, 0);
	glutMainLoop();




}
float x_position = 0.0;
float y_position = 0.0;
int state = 1;
void draw() {

	glClear(GL_COLOR_BUFFER_BIT);
	glLoadIdentity();
	glTranslatef(0, 1.5, 0);
	glBegin(GL_TRIANGLES);
	glColor3f(1, 0, 0);
	glVertex2f(-2, y_position + 0);
	glColor3f(1, 1, 0);
	glVertex2f(0, y_position + 2);
	glColor3f(1, 0, 1);
	glVertex2f(2, y_position + 0);
	glEnd();
	glBegin(GL_TRIANGLES);
	glColor3f(1, 0, 0);
	glVertex2f(-2, y_position + 0);
	glColor3f(1, 1, 0);
	glVertex2f(0, y_position - 2);
	glColor3f(1, 0, 1);
	glVertex2f(2, y_position + 0);
	glEnd();

	glTranslatef(0, -4, 0);
	glBegin(GL_TRIANGLES);
	glColor3f(1, 0, 0);
	glVertex2f(-2, y_position + 0);
	glColor3f(1, 1, 0);
	glVertex2f(0, y_position + 2);
	glColor3f(1, 0, 1);
	glVertex2f(2, y_position + 0);
	glEnd();

	glutSwapBuffers();
}
void reshape(int w, int h) {
	float ratio;
	if (h == 0)
		h == 1;
	ratio = (float)w / h;

	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w >= h)
		gluOrtho2D(-10 * ratio, 10 * ratio, -10, 10);
	else
		gluOrtho2D(-10, 10, -10 / ratio, 10 / ratio);
	glMatrixMode(GL_MODELVIEW);

}
void background() {
	glClearColor(0.3, 0.4, 1, 0);
}
void timer(int) {
	glutPostRedisplay();
	glutTimerFunc(1000 / 60, timer, 0);
	switch (state) {
	case 1:
		if (y_position < 6)
			y_position += 0.2;
		else
			state = 0;
		break;
	case 0:
		if (y_position > -6)
			y_position -= 0.2;
		else
			state = 1;
		break;
	}
}